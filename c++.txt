cout<<"xxxx"<<endl  //endl 是end line 作用是换行
函数传参，如果要改变函数指针的值，需要定义双重指针，**p
/*****************************************************
代码规范
***************************************************/
_t ;//结尾
g_//全局变量
int g_val;未初始化 全局在bss段 bss段的特点就是被初始化为0
int 
//知识点
1.命名空间
个人理解：命名空间相当于作用域，防止命名重复
命名空间 不能包括预处理命令
声明：using namespace xxx;
定义命名空间：
namespace xxx{
int a=0;
}
方式一：
namespace ns1{
int a=0;
}
namespace ns2
{
int a=0;
}
ns1::a=2;
ns2::a=3;
方式二：
using namespace ns1;
a=2;
无命名空间 
namespace
{
xxx;
}
只能在本文件使用。
2.结构体声明
typdef struct student
{
}st;


3.三目运算符
int a=10;
int b=20;
int c=0;
c=(a<b)?a:b;
(true /false)?a:b
true 取a，false取b
4.const
const int a; int const a;//c++:一样代表常量整型，不可修改，存在栈;c:是可以修改
const int *a; 所指向的内存数据不能修改，但是本身地址可以修改。
int * const a; 常指针 指向不可以修改(即地址不可以修改)，但是所指向的内存数据不能修改
const int * const a;结合上面两个。
如果对一个常量取地址，会创建一个临时的空间，存a的值。
#define   A 20 是预处理器的时候处理
const int a=20;编译的时候处理
5.变量存储
//参考网址1：https://blog.csdn.net/jxm_csdn/article/details/39829535
//参考网址2：https://blog.csdn.net/hamlet_zy/article/details/54377634
char *p = "linux"，“linux”是一个字符常量，不是字符变量
bbs段不影响a.out的大小,bbs段的数据用占位符标示而已，不在a.out里面.程序初始化的时候才产生.
stack heap也都是在运行的时候产生.
c语言程序分为映像和运行两个状态，在编译-连接，只包含代码段（text）,只读数据段（由const修饰），读写数据段（全局变量），在程序运行之前会动态生成未初始化数据段（bbs）,在程序讯息时动态形成堆和栈。
static 静态修饰
堆：亦称动态内存分配。程序在运行的时候用malloc或new申请任意大小的内存，程序员自己负责在适当的时候用free或delete释放内存。动态内存的生存期可以由我们决定，如果我们不释放内存，程序将在最后才释放掉动态内存。
栈：又称堆栈， 存放程序的局部变量（但不包括static声明的变量，static意味着在数据段中存放变量）
代码区：代码段（code segment/text segment）通常是指用来存放 程序执行代码 的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于 只读 , 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些 只读的常数变量 ，例如字符串常量等。程序段为程序代码在内存中的映射.一个程序可以在内存中多有个副本.
BSS段：未初始化的全局变量,程序初始化的时候才产生空间
数据区：数据段（data segment）通常是指用来存放程序中 已初始化 的 全局变量 的一块内存区域。数据段属于静态内存分配
RW_DATA 和 RO_DATA
eg:
Code=86496 RO-data=9064 RW-data=1452 ZI-data=16116 
Code是代码占用空间 ，RO是只读数据，例如由const修饰 RW,读写数据例如已经初始化的全局变量，静态变量，ZI是未被初始化全局变量大小；
在烧写到FLASH里面，一般是：code+ro+rw;不包括zi,因为一开始是不会被初始化。
运行时，内部RAM大小,RW-data+ZI-data，以及一些堆栈等。
以下是空间图
high address 
		stack(栈，先下生长)
		...
		heap(堆，先上生长)
		未初始化段（bss）
		初始化段
		text (代码段)
low address

6.枚举
eg:
enum season{
	SPR=0,
	SUM,
	AUT,
	WIN
};
enum seasom s=SPR；
if(s==SPR)
{

}
7.引用
引用：变量的别名，两个变量直线同一地址，改变一个的值，另一个同时也会改变。
void swap(int a,int b)
{...}
int i=1,j=1;
swap(i,j);
void swap (int *a,int *b)
{...}
int i=1,j=1;
swap(&i,&j);
void swap(int &a,int &b)
{...}
int i=1,j=1;
swap(i,j);
个人理解：
方式一，传入的是实参的值，属于传值方式，并不能改变i，j的值
方式二，传入的是实参的地址，也是属于传值方式，也是开辟临时空间去存实参的地址，函数的功能是去操作这个地址的值，能够改变i觉得值
方式三，传入的实参不是地址，而是别名，这个是引用，系统会自动把实参的地址付给形参，真正意义上的传址方式。

引用作为函数返回值，可以当左值，引用作为函数返回值，不能给再给引用，因为返回值的空间会被释放掉。
如果相对一个常量进行引用，必须是一个const引用。
const int a=10;
const int &re=a;//正确
int &re=a;//错误
8.内联函数
inline int max(int a,int b)
{
	a=1;b=2;
	retun a;
}

int c=max(i,j);被置换为：
a=1;b=1;
c=a;
跟宏函数类似，宏是预处理器处理的，内联函数是编译器；
处理重复代码，但是不能包含复杂的控制语句
9.默认参数
c++,默认参数从左向右
10.函数重载
一物多用，公用一个函数名，允许参数类型不多，参数个数不同；
尽量不要有默认参数
11.函数指针
int （*p）(int,int)=NULL;
P=MAX;
P(1,2);
12.类
class AD
{
	public:
	int a;
	//在类内部定义
	int max(int a,int b)
	{
	return a;
	}
	
	private:
	int b;
}
//在类外部定义
int AD::max(int a,int b)
{
return a;
}
//定义一个对象
AD AD_S;
类一般都三个文件，类的声明（.h）类的定义（.cpp） 主函数（main.c）
方法：函数的定义
对象:定义对象
消息：调用函数
---------------------------
class A
{

}
class Time
{
public:
	Time(类名)(int x ,int y)
	{
		time_x=x;//	//		构造体
		time_y=y;
	}
//无参构造,隐性，默认
Time ()
{

}
	
//有参构造
	Time(类名)(int x )  
	{
		time_x=x;//	//		构造体
	
	}
//拷贝构造函数
Time (const Time & another)	
{
	this->x=another.x;
	this->y=another.y;
}
//浅拷贝，如果成员有指针的话，会出现溢出
Time(const Time &another)
{
	this->x=another.x;
	this->y=another.y;
	this->sp=another.sp;//错误
}
//深拷贝
Time (const Time & another)
{
	this->x=another.x;
	this->y=another.y;
	int len=strlen(another.sp);
	
	this->sp=(char *)malloc(len+1);
	if(this->sp!=NILL)
	{
		strcpy(this->sp,another.sp);
	}
	//new
	this->sp=new char [10];
	if(this->sp!=NILL)
	{
		strcpy(this->sp,another.sp);
	}
}
//构造函数的初始化列表-1  调用了A的拷贝构造
Time(A &a1,int x,int y):m_a(a1)
{
	this->x=x;
	this->y=y;
}
//构造函数的初始化列表-2  调用了A的有参构造
Time（int a,int x1,int y1）:m_a(a),x(x1),y(y1)
{
	;
}
//析构函数
~Time()
{
	cout<<"~Time()"<<endl;
	//free
	if(this->sp!=NULL)
	{
		free(this->sp);
		this->sp=NULL;
	}
	//delete
	if(this->sp!=NULL)
	{
		delete [10] this-sp;
		this->sp=NULL;
	}
}
	private:
	int time_x;
	int time_y;
	char *sp;//深拷贝浅拷贝
	A m_a;
	static int c;
	}
	
	//类的外面
	int Time::C=100;

Time t1(1,2);
Time t1(1); //重载
Time t3; //无参
Time t1(t2); Time ti=t2;//拷贝构造函数
说明：
构造函数是在定义对象的时候调用的
构造函数可以重载
构造函数可以无参
构造函数可以
------------------------------------

----------------------------------------   
构造函数
利用构造函数对类进行初始化
不能在类声明中对数据成员初始化，因为类不是一个实体，是一个抽象类型，不占空间
-------------------------------
拷贝构造 浅拷贝 深拷贝
1）
Time t1;
Time t2=t1;//是调用了拷贝函数，如果成员有指针，需要写深拷贝函数。
2）
Time t1;
Time t2;
t2=t1;//是用到运算符重载


1）Time t1=get();
2)Time t1;
t1=get();
方式一和方式二是不一样的，
方式二是运用了运算符重载。
----------------------------
Time t1;
void func(Time t); //调用了拷贝构造  ，这个函数结束后会析构t 
func(t1);//Time t=  t1;
---------------------------
Time func ()
{
	Time t1;
	return t1;
}//匿名对象= t1 ,这个函数执行后，t1析构，返回匿名对象，有匿名对象的拷贝构造，如果返回值没有接收，就立即执行析构
void  test()
{
	func();//如果返回值没有接收，就立即执行析构
	--------
	Time t2=func();//不会触发拷贝对象来 t2.拷贝(匿名)，而是把匿名对象转正，即起了个名字t2,编译器不会立刻析构，要等之后回收
}

-----------------------------
1)Time test_t()
{
Time t1;
return t1;
//return *this;
}
2)Time & test_t()
{
	Time t1;
	return t1;
	//return *this;//返回自身
}
方式一，会创建一个匿名的对象，return 的是一个匿名对象，如果 Time T3=test_t()；匿名对象会被转正，不会立刻析构，之后再析构；如果 test_t();返回值没有接收，匿名对象会被立刻析构。
方式二， return的是t1这个对象 ，是没有创建一个匿名对象，如果有有接收返回值，t1的拷贝构造/
引用是另一个的别名，功能跟指针差不多，相对于指针更加直观。
-------------------------------------
构造函数的初始化列表

-------------------------------
析构函数
先构造的后析
~Time()
{
	cout<<"~Time()"<<endl;
	//
}
------------------------------ 
new delete 是运算符
sp=new int[10];
delete [] sp;
BOX *pt=new BOX(1,2,3);//再堆创建一个对象
delete pt;
------------------------------
static
静态成员函数是不属于对象，存在于静态区，可以用类名去调用
静态成员为private,需要用static成员函数去调用。
静态成员变量的初始化一定要在类的外面
静态成员函数只能访问静态成员变量
静态成员是属于类的，没有this指针

------------------------------
this指针
this 是指针 Time * const 是个常指针，不能改变指向,但是可以改变值
		//不是 const Time *
如果成员函数尾部出现了const 是修饰this指针
int get() const
{
	return this->xx;
}//相当于  const Time * const		


-----------------------------------------------------------
友元函数 friend ，可以访问友元类的，public private的成员、
破坏了类的封装特性 ，非成员函数可以访问私有成员，建议少用
class Time
{
	public:
	friend void max(Time &t1);
	//friend void A::max(Time & t1);友元函数为另一个类成员函数
	private:
	int a;
	int b;
}
void max (Time & t1) 
{
	return Time.a;
}
说明：max函数是属于类外的函数，但是可以使用类Time里面的私有成员，因为在Time中定义了friend,这就是友元函数。

友元类
class A{
	public：
	friend class B;
	private：
}
class B
{
	public:
	private:
}
声明友元类，那么B的成员可以使用A的成员。
友元是单向的 
友元关系不能被继承
友元关系不具有传递性  
------------------------------------------
操作符重载

operator
一般格式：
函数类型 operator 运算符名称 （形参表
{
对运算符重载的处理；
}


1)c++	不允许用户自己定义新的运算符，只能对已有的进行重载
2）不能重载的运算符有5个 
         （成员范围运算符）
*		 （成员指针访问运算符）
::		 （域运算符）
sizeof	 （长度运算符）
?:        (条件运算符）
3)重载不能改变运算符的操作数的个数
4）重载不能改变运算符的优先级
5）不能改变运算符的结合姓
6）不能有默认参数

双目运算符: + ，-，*，/，%
单目运算符: +(正数)，-（负数），*（指针），&（取地址）
13.继承与派生

高内聚，低耦合
高内聚：函数功能越单一。就是高内聚
低耦合:跟其他类的关系，越小越好
继承的耦合度是很高的
通过继承，产生的子类（类的派生）

派生类的声明:
继承方式：public private protected;默认是private
public:类外能够访问
private:类外和子类都不能访问
protected： 类外不能访问，但是子类可以访问,下一层也派生类也可以访问
公有继承：
基类       派生类
public     变成派生类的public
private    不能访问
protected  变成派生类的protected
私有继承
基类        派生类
public      变成派生类的private
private     不能访问
protected    变成派生类的private

保护继承
基类         派生类
public       变成派生类的protected
private       不能访问
protect       变成派生类的protected

如果在多级派生中：
采用公有继承，到最后一级都是能够访问基类的公有成员和保护成员
采用私有继承，那么经过若干次派生后，基类的所有成员都访问不了
采用保护继承，经过多次派生后，比较容易出错
在实际中，常用的是公有继承
构造派生类有三部分工作
1)从基类接收成员
2）调整从基类接收的成员
3）在声明派生类时增加的成员
class 派生类名：[继承方式] 基类名
{

}
三看原则
1.调用的成员是在类的外部还是类的呢不
2.看儿子的继承方式
3。当前变量在父亲的权限
----------------------
派生类的构造函数和析构函数